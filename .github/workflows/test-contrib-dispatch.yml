name: Contributor install test

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version'
        required: true
        default: '3.8'
      os:
        description: 'Operating System'
        required: true
        default: 'ubuntu-latest'
      method:
        description: 'Method install python dependencies can be venv or poetry'
        required: true
        default: 'venv'

jobs:
  build:

    runs-on: ${{ github.event.inputs.os }}
#    strategy:
#      matrix:
#        os: [ ${{ github.event.inputs.os }} ]
#        python-version: [ ${{ github.event.inputs.python-version }} ]
#        method: [ ${{ github.event.inputs.method }} ]

    steps:
      - name: Install OS Dependencies
        if: ${{ github.event.inputs.os }} == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get -y install graphviz

      - name: Install OS Dependencies
        if: ${{ github.event.inputs.os }} == 'macos-latest'
        run: |
          brew install graphviz

      - name: Install OS Dependencies
        if: ${{ github.event.inputs.os }} == 'windows-latest'
        run: |
          choco install graphviz
      - uses: actions/checkout@v2
      - name: Set up Python ${{ github.event.inputs.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ github.event.inputs.python-version }}
      - name: Install dependencies traditionally with virtualenv
        if: ${{ github.event.inputs.method }} == 'venv'
        run: |
          virtualenv venv 
          source venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          pytest
      - name: Install dependencies with poetry
        if: ${{ github.event.inputs.method }} == 'poetry'
        run: |
          pip install poetry
          poetry install
          poetry run pytest
    continue-on-error: true